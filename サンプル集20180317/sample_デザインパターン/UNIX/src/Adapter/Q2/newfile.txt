★第2章★ 『Adapter - 一皮かぶせて再利用』



■Adapterパターン

　例えば、12ボルトの電池で動くノートパソコンを100ボルトのAC電源につなぐとしましょう。そのとき私たちは、ACアダプターという装置を使います。ACアダプターは、家庭用の電源として提供されている「交流100ボルト」を、いま必要な「直流12ボルト」に変換してくれます。提供されているものと、必要なものとの間に入って、その間を埋めるのがアダプターの仕事です。アダプターは英語でadapterと書き、「adapt（適合）させるもの」という意味です。

◆Fig.2-1  アダプターの役割

　プログラムの世界でも、すでに提供されているものがそのまま使えないときに、必要な形に変換してから利用することがよくあります。「すでに提供されているもの」と「必要なもの」の間の「ずれ」を埋めるようなデザインパターン、これが

    Adapter（ル▼アダプター）パターン

です。
　AdapterパターンはWrapper（ル▼ラッパー）パターンと呼ばれることもあります。wrapperとは「包むもの」という意味です。普通の商品をきれいな包み紙で包んで、ギフト用品にするように、何かをくるりと包んで別の用途に使えるように変換してくれるもの、それがラッパーであり、アダプターということになります。
　Adapterパターンには以下の2種類があります。

　　・クラスによるAdapterパターン（継承（ル▼けいしょう）を使ったもの）
　　・インスタンスによるAdapterパターン（委譲（ル▼いじょう）を使ったもの）

　以下では、この2種類のAdapterパターンについて順にお話します。

■サンプルプログラム（1）　（継承を使ったもの）

　クラスによるAdapterパターンを使ったサンプルプログラムを読んでみましょう。ここで作るサンプルプログラムは与えられた文字列を

    (Hello)

のように表示したり、

    *Hello*

のように表示したりするという簡単なものです。
　いま、Bannerクラス（banner（ル▼バナー）は「広告の垂れ幕」という意味）には、文字列をカッコでくくって表示するshowWithParenというメソッドと、文字列の前後に*印をつけて表示するshowWithAsterというメソッドが用意されています。これを、交流100ボルトのように「すでに提供されているもの」だと仮定します。
　一方、Printインタフェースでは、文字列を弱く表示するためのメソッドprintWeak（weak（ル▼ウィーク）は弱いという意味）と、文字列を強く（強調して）表示するためのメソッドprintStrong（strong（ル▼ストロング）は強いという意味）が宣言されているとします。このインタフェースが、直流12ボルトのように「必要なもの」だと仮定しましょう。
　いまやりたいことは、Bannerクラスを利用して、Printインタフェースを満たすようなクラスを作ることです。すなわち、交流100ボルトを直流12ボルトに変換してくれるようなアダプターを作ることです。
　アダプターの役割を担うのがPrintBannerクラスです。このクラスは、提供されているBannerクラスを★継承☆し、必要とされているPrintインタフェースを★実装☆します。PrintBannerクラスは、showWithParenメソッドを使ってprintWeakを実装し、showWithAsterメソッドを使ってprintStrongを実装するのです。これでPrintBannerクラスはアダプターとしての機能を果たすことになります。電源の比喩とこのサンプルプログラムの対応関係をTable 2-1に示します。

◆Table 2-1  電源の比喩とサンプルプログラムの対応関係
-----------------------------------------------------------------------------
                    電源の比喩      サンプルプログラム
-----------------------------------------------------------------------------
提供されているもの　交流100ボルト　Bannerクラス（showWithParen, showWithAster）
変換装置        アダプター      PrintBannerクラス
必要なもの      直流12ボルト    Printインタフェース（printWeak, printStrong）
------------------------------------------------------------------------------
◆Fig.2-2  クラスによるAdapterパターンのクラス図


●Bannerクラス

　Bannerクラス（List 2-1）はあらかじめ提供されているクラスとします。

◆List 2-1  Bannerクラス（Banner.java）

public class Banner {
    private String string;
    public Banner(String string) {
        this.string = string;
    }
    public void showWithParen() {
        System.out.println("(" + string + ")");
    }
    public void showWithAster() {
        System.out.println("*" + string + "*");
    }
}
−−−−−−−−−−−−

●Printインタフェース

　Printインタフェース（List 2-2）が必要とされているインタフェースとします。

◆List 2-2  Printインタフェース（Print.java）

public interface Print {
    public abstract void printWeak();
    public abstract void printStrong();
}
−−−−−−−−−−−−

●PrintBannerクラス

　PrintBannerクラス（List 2-3）がアダプターの役目を果たします。用意されているBannerクラスを拡張（extends）して、showWithParenメソッドとshowWithAsterメソッドを継承します。また、要求されているPrintインタフェースを実装（implements）してprintWeakメソッドとprintStrongメソッドを実装しています。

◆List 2-3  PrintBannerクラス（PrintBanner.java）

public class PrintBanner extends Banner implements Print {
    public PrintBanner(String string) {
        super(string);
    }
    public void printWeak() {
        showWithParen();
    }
    public void printStrong() {
        showWithAster();
    }
}
−−−−−−−−−−−−

●Mainクラス

　Mainクラス（List 2-4）は、ここで作ったアダプター役のPrintBannerクラスを使ってHelloという文字列を弱く（カッコ付きで）、また強く（*ではさんで）表示します。
　ここで、PrintBannerのインスタンスをPrintインタフェース型の変数に代入していることに注意してください。このMainクラスはあくまでPrintというインタフェースを使って（つまりprintWeakメソッドとprintStrongメソッドを使って）プログラミングをしているのです。BannerクラスやshowWithParenメソッドやshowWithAsterメソッドは、Mainクラスのソースコード上からはすっかり隠されています。これはちょうど、ノートパソコンは直流12ボルトさえ提供してもらえば正しく動作し、それを支えているのが（アダプターの向こう側にいるのが）交流100ボルトだなんてことは知らないのと似ています。
　PrintBannerクラスがどういうふうに実現されているかをMainクラスは知りません。知らないということは、Mainクラスをまったく変更せずにPrintBannerクラスの実装を変えられるということでもありますね。

◆List 2-4  Mainクラス（Main.java）

public class Main {
    public static void main(String[] args) {
        Print p = new PrintBanner("Hello");
        p.printWeak();
        p.printStrong();
    }
}
−−−−−−−−−−−−

◆Fig.2-3  実行結果

(Hello)
*Hello*
−−−−−−−−−−−−


■サンプルプログラム（2）　（委譲を使ったもの）

　先ほどのサンプルプログラムは「クラスによる」Adapterパターンでした。今度は「インスタンスによる」Adapterパターンを見てみましょう。先ほどのサンプルプログラムでは「継承」を使って適合を行いましたが、今度は「委譲」を使います。

◆ちょっと一言：委譲について

　委譲（ル▼いじょう）というのは堅苦しい表現ですが、要するに「誰かにお任せする」ということです。重要な会議に出席できないとき、委任状というものを書きます。「私は出席できませんが、私の代わりとして佐藤さんにお願いします」というものです。委譲というのは委任と同じです。Javaでの委譲は、あるメソッドの実際の処理を他のインスタンスのメソッドに任せてしまうことをいいます。

　Mainクラス、Bannerクラスは先ほどのサンプルプログラム（1）と同じです。しかし、Printはインタフェースではなくクラスだと仮定します（List 2-5）。
　つまり、Bannerクラスを利用して、Printクラスと同じメソッドを持つクラスを実現しようというのです。Javaでは、2つのクラスを同時に継承することはできません（単一継承（ル▼たんいつけいしょう））。Javaでは、PrintBannerクラスを、PrintとBannerの両方のサブクラスとして定義することはできないのです。
　PrintBannerクラス（List 2-6）は、bannerフィールドでBannerクラスのインスタンスを保持します。このインスタンスはPrintBannerクラスのコンストラクタで生成します。そして、printWeakおよびprintStrongメソッドでは、そのbannerフィールドを介してshowWithParen, showWithAsterメソッドを呼び出すのです。
　先ほどの例では、自分のスーパークラスから継承したshowWithParen, showWithAsterメソッドを呼んでいましたが、今度はフィールド経由で呼び出しています。
　ほら、委譲が出てきましたね。PrintBannerクラスのprintWeakメソッドが呼ばれたとき、自分で処理をするのではなく別のインスタンス（Bannerのインスタンス）のshowWithParenに★お任せして☆いるのです。

◆Fig.2-4  インスタンスによるAdapterパターンのクラス図

●Printクラス

◆List 2-5  Printクラス（Print.java）

public abstract class Print {
    public abstract void printWeak();
    public abstract void printStrong();
}
−−−−−−−−−−−−

●PrintBannerクラス

◆List 2-6  PrintBannerクラス（PrintBanner.java）

public class PrintBanner extends Print {
    private Banner banner;
    public PrintBanner(String string) {
        this.banner = new Banner(string);
    }
    public void printWeak() {
        banner.showWithParen();
    }
    public void printStrong() {
        banner.showWithAster();
    }
}
−−−−−−−−−−−−

■Adapterパターンの登場人物

　Adapterパターンの登場人物は次のとおりです。

◆［Target（ル▼ターゲット）（対象）の役］

　いま必要となっているメソッドを定めている役です。ノートパソコンを動かすための直流12ボルトですね。サンプルプログラムでは、Printインタフェース（継承の場合）やPrintクラス（委譲の場合）がこの役をつとめました。

◆［Client（ル▼クライアント）（依頼者）の役］

　Targetのメソッドを使って仕事をする役です。直流12ボルトで動くノートパソコンですね。サンプルプログラムでは、Mainクラスがこれに相当します。

◆［Adaptee（ル▼アダプティー）（適合される側）の役］

　Adapt-er（適合する側）じゃなくてAdapt-ee（適合される側）です。すでに用意されているメソッドを持っている役です。交流100ボルトのAC電源ですね。サンプルプログラムでは、Bannerクラスがこの役をつとめました。
　このAdaptee役のメソッドがTargetのメソッドに一致していたら（つまり家庭に提供されているのが最初から直流12ボルトだったら）、次のAdapter役はいらなかったのですがね…。

◆［Adapter（ル▼アダプター）の役］

　Adapterパターンの主人公です。Adaptee役のメソッドを使って何とかTarget役を満たそうというのがAdapterパターンの使命であり、Adapter役のお仕事です。交流100ボルトを直流12ボルトに変換するアダプターです。サンプルプログラムでは、PrintBannerクラスがこの役をつとめました。
　クラスによるAdapterパターンの場合には、Adapter役は「継承」を使ってAdaptee役を利用します。
　一方、インスタンスによるAdapterパターンの場合には、「委譲」を使ってAdaptee役を利用します。
　この2つのAdapterパターンをクラス図で表記すると、Fig.2-5とFig.2-6のようになります。

◆Fig.2-5  クラスによるAdapterパターン（継承を使う）

◆Fig.2-6  インスタンスによるAdapterパターン（委譲を使う） 


■あなたの考えを広げるためのヒント

●どんなときに使うのだろう

　「必要なメソッドがあるなら、それをプログラミングすればいいじゃないか。どうしてAdapterパターンなどというものを考える必要があるのか」と疑問に思う読者もいると思います。Adapterパターンはどんなときに使うのでしょうか。
　私たちは、いつもゼロからプログラミングするとは限りません。すでに存在しているクラスを利用することもよくあります。特にそのクラスが十分にテストされ、バグが少なく、また実際にこれまで使われてきた実績があるのならばなおさらです。何とかそのクラスを部品として再利用したいものです。
　Adapterパターンは、既存のクラスに一皮かぶせて必要とするクラスを作ります。このパターンによって、必要とするメソッド群をすばやく作ることができます。もしバグが出たとしても、既存のクラス（Adaptee役）にはバグがないことがわかっているのでAdapter役のクラスを重点的に調べればよいことになり、プログラムのチェックがとても楽になります。

●たとえソースがなくても

　すでに作られたクラスがあって、新しいインタフェース（API）に適合させる、と考えると、Adapterパターンというのは当たり前のことのように感じられます。しかし、私たちは、新しいインタフェース（API）に適合させようとするとき、つい既存のクラスのソースをいじって「修正」しようと考えてしまいます。「ここをちょいと変えればきっと仕事はおしまいだな」と考えてしまうのです。でもそれでは、動作テストがすんでいる既存のクラスを、修正後にもう一度テストしなければならなくなってしまいます。
　Adapterパターンは、既存のクラスにはまったく手を加えずに、目的のインタフェース（API）にあわせようとするものです。また、Adapterパターンでは、既存のクラスのソースプログラムは必ずしも必要ではありません。既存のクラスの仕様だけがわかれば、新しいクラスを作ることができるのです。

●バージョンアップと互換性

　ソフトウェアにはバージョンアップがつきものです。ソフトウェアをバージョンアップするときに問題になるのが「古い版との互換性」です。古い版を捨ててしまえればソフトウェアのメンテナンスは楽なのですが、いつもそれができるとは限りません。古い版と新しい版とを共存させて、しかもメンテナンスを楽に行うためにAdapterパターンが役に立つことがあります。
　例えば、今後は新しい版だけをメンテナンスしたいとします。その場合は新しい版をAdaptee役とし、古い版をTarget役とします。そして、新しい版のクラスを使って古い版のメソッドを実装するAdapter役のクラスを作るのです。
　この関係を表現した概念図をFig.2-7に示します（これはUMLによる図ではありません）。

◆Fig.2-7  過去のバージョンとの互換性を取るためのAdapterパターン

●かけ離れたクラス

　もちろん、Adaptee役とTarget役の機能があまりにもかけ離れている場合には、Adapterパターンは使えません。100ボルトの電源を元にして水道の水を出すわけにはいきませんからね。

■関連しているパターン

◆Bridgeパターン（第9章）

　Adapterパターンは、インタフェース（API）が異なっているクラス同士を結びつけるパターンです。Bridgeパターンは、機能の階層と実装の階層を結びつけるパターンです。

◆Decoratorパターン（第12章）

　Adapterパターンは、インタフェース（API）のずれを埋めるためのパターンです。Decoratorパターンは、インタフェース（API）を変えずに機能を追加するパターンです。


■この章で学んだこと

　この章では、インタフェース（API）が異なっている2つの間に入って、そのずれを埋めるためのAdapterパターンについて学びました。継承を使ったものと、委譲を使ったものを紹介し、それぞれの特徴についてお話しました。
　どうですか、だいぶデザインパターンに慣れてきましたか。練習問題にもぜひ取り組んでみてください。


■練習問題

●問題2-1

［Java］
　サンプルプログラムでは、PrintBannerクラス（List 2-6）のインスタンスを作ったときに、次のようにPrint型の変数に代入しています。

    Print p = new PrintBanner("Hello");

　なぜ、次のようにPrintBanner型の変数に代入しないのでしょう。

    PrintBanner p = new PrintBanner("Hello");


●問題2-2

　java.util.Propertiesクラスは、

    year=2000
    month=11
    day=20

のような、キーとその値の組（プロパティ）を管理するためのものです。java.util.Propertiesクラスには、プロパティをストリームから読んだりストリームに書いたりするために、次のメソッドが用意されています。

    void load(InputStream in) throws IOException
        プロパティの集合をInputStreamから読み込む。
    void store(OutputStream out, String header) throws IOException
        プロパティの集合をOutputStreamに書き込む。headerはコメント文字列。

　Adapterパターンを使って、プロパティの集合をファイルに保存するFilePropertiesクラスを作ってください。
ここで、プロパティの集合をファイルに保存するメソッドはFileIOインタフェース（Target役）で宣言するものとし、FilePropertiesクラスはこのFileIOインタフェースを実装するとします。
　実行前のfile.txtおよび実行後のnewfile.txtはList 2-7とList 2-8のようになります（#で始まる行は、java.util.Propertiesクラスによって自動的に付加されるコメントです）。
　FilePropertiesクラスがあれば、java.util.Propertiesクラスのメソッドについて知らなくても、FileIOインタフェースのメソッドさえ知っていればプロパティを扱えることになります。
　電源の比喩でいえば、java.util.Propertiesクラスが提供されている交流100ボルト、FileIOインタフェースが必要とされている直流12ボルト、そしてFilePropertiesクラスがアダプターになります。

◆List 2-7  FileIOインタフェース（FileIO.java）

import java.io.*;

public interface FileIO {
    public void readFromFile(String filename) throws IOException;
    public void writeToFile(String filename) throws IOException;
    public void setValue(String key, String value);
    public String getValue(String key);
}
−−−−−−−−−−−−

◆List 2-8  Mainクラス（Main.java）

import java.io.*;

public class Main {
    public static void main(String[] args) {
        FileIO f = new FileProperties();
        try {
            f.readFromFile("file.txt");
            f.setValue("year", "2000");
            f.setValue("month", "11");
            f.setValue("day", "20");
            f.writeToFile("newfile.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
−−−−−−−−−−−−

◆List 2-9  入力ファイルfile.txt（file.txt）

year=1999
−−−−−−−−−−−−

◆List 2-10  出力ファイルnewfile.txt（newfile.txt）

#written by FileProperties
#Mon Nov 20 10:27:07 JST 2000
day=20
year=2000
month=11
−−−−−−−−−−−−
